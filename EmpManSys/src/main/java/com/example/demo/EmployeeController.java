package com.example.demo;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.Employee;
import com.example.demo.EmployeeService;

@Controller // This means that this class is a Controller
public class EmployeeController {

	@Autowired
	// This means to get the bean which is auto-generated by Spring
	// We will use an employeeService for each
	EmployeeService employeeService;

	//	display list of employees
	@GetMapping("/")
	// This means that this method will be executed when user sends GET Requests to "/"
	// In our case, "http://localhost:8080/"
	public String viewHomePage(Model model) {

		//	We can use this attribute "listEmployees" to perform server-side rendering of the HTML with using Thymeleaf.
		//	We set all employees data to "listEmployees"
	   
		//model.addAttribute("listEmployees", employeeService.getAllEmployees());

		//		shows the index.html template:
		return "index";
	}

	//	showNewEmployeeForm
	@GetMapping("/showNewEmployeeForm")
	// This means that this method will be executed when user sends GET Requests to "/showNewEmployeeForm"
	// In our case,  "http://localhost:8080/showNewEmployeeForm"
	public String showNewEmployeeForm(Model model) {
		Employee employee = new Employee();

		// We can use this attribute "employee" to perform server-side rendering of the HTML with using Thymeleaf.
		model.addAttribute("employee", employee);

		//	shows the new_employee.html template:
		return "new_employee";
	}
	@RequestMapping("/showSearchForm")
	// This means that this method will be executed when user sends GET Requests to "/showNewEmployeeForm"
	// In our case,  "http://localhost:8080/showNewEmployeeForm"
	public String showSearchForm(Model model) { 
	 
		//	shows the new_employee.html template:
		return "searchform";
	}
	
	@RequestMapping("/searchEmployee")
	// This means that this method will be executed when user sends GET Requests to "/showNewEmployeeForm"
	// In our case,  "http://localhost:8080/showNewEmployeeForm"
	public String searchEmployee(@RequestParam Long sid,Model model) { 
		 if(employeeService.employeeRepository.existsById(sid))
		 {
			 Employee employee = employeeService.getEmployeeById(sid);

		     // We can use this attribute "employee" to perform server-side rendering of the HTML with using Thymeleaf.
		     model.addAttribute("employee", employee);
		 }
		 else
			 model.addAttribute("error", "Id Not exists!"); 
		//	shows the new_employee.html template:
		return "searchform";
	}
	//	add an employee
	@PostMapping("/saveEmployee")
	// This means that this method will be executed when user sends POST Requests to "/saveEmployee"
	// In our case, "http://localhost:8080/saveEmployee"
	public String saveEmployee(Model model,@ModelAttribute("employee") Employee employee) {
		//	@ModelAttribute  binds the object called "employee" of request body from the POST request into the employee parameter of the saveEmployee() method.
		
        	List<String> error=new ArrayList<String>(); 
		    
        	if(employee.getId()==0)
		    	error.add("Id not be empty"); 
        	
        	if(employee.getDepartment()=="")
        		error.add("Department not be empty"); 

        	if(employee.getName()=="")
        		error.add("Name not be empty");
        	
        	if(employee.getSalary()==0)
        		error.add("Salary not be empty");
        	
        	if(employeeService.employeeRepository.existsById(employee.getId()))
        		error.add("Id already exists!");
		    
		    if(error.size()>0)
		    	return showNewEmployeeForm(model.addAttribute("error",error));
		    
        	employeeService.saveEmployee(employee);
		  
         
		// after save the employee data to database, redirect to "/"
		 
         return "redirect:/";
	}

	 

	//	delete the employee by id
	@GetMapping("/delete/{id}")
	// This means that this method will be executed when user sends GET Requests to "/delete/{employee's id}"
	//	In our case, "http://localhost:8080/delete/{employee's id}"
	public String deleteEmployeeById(@PathVariable Long id, Model model) {
		employeeService.deleteEmployeeById(id);

	//	after delete the employee data from database, redirect to "/"
		return "redirect:/";
	}
}
